############################################

BetaKH = function(Y,X,h,k){
  # in X there is cte
  p = ncol(X)
  #
  XX = crossprod(X)
  Xy = crossprod(X,Y)
  beta = solve(XX)%*%Xy
  #
  alfa = matrix(mean(Y), p, 1)
  for (i in 2:p) alfa[i] = cov(Y, X[,i])/var(X[,i])
  #
  XXk = XX + k*diag(p)
  Zk = solve(XXk)
  betakh = Zk%*%XX%*%beta + k*h*Zk%*%alfa # expression (8)
  #
  output = data.frame(beta, betakh, alfa)
  return(output)
}

####################################################################
# condition number

NCk = function(X,k){
  # in X there is constant
  n = nrow(X)
  p = ncol(X)
  x = matrix(, nrow=n, ncol=p)
  #
  for (i in 1:p){x[,i] = X[,i]/norm(X[,i],"2")} # unit length
  #
  xx = crossprod(x)
  #
  landas = eigen(xx)[[1]]
  max.landas = max(landas)
  min.landas = min(landas)
  #
  nc = sqrt((max.landas+k)/(min.landas+k))
  #
  return(nc)
}

####################################################################

VIFk <- function(X,k){
	# in X there is constant
	X = X[,-1]
	n = nrow(X)
	p = ncol(X)
	I = diag(p)
	# standardized variables
	Xest = matrix( , n, p)
	for (i in 1:p) {
		mmean = mean(X[,i])
		variance = ((n-1)/n)*var(X[,i])
		for (j in 1:n) {			
			Xest[j,i] = (X[j,i] - mmean)/sqrt(n*variance)
		}
	}
	# VIF	
	Ik = sqrt(k)*I
	Xa = rbind(Xest,Ik)
	vifs = numeric()
	for (i in 1:p)
	{
		reg.aux = lm(Xa[,i] ~ Xa[,-i] - 1)
		R2 = as.numeric(summary(reg.aux)[8])
		vifs[i] = 1/(1-R2)
	}
	# 
	return(vifs)
}

####################################################################

detRk = function(X, k){
	# in X there is constant
	X = X[,-1]
	n = nrow(X)
	p = ncol(X)
	I = diag(p)
	#
	Xk = rbind(X,sqrt(k)*I)
	R = cor(Xk)
	detR = det(R)
	#
	return(detR)
}

####################################################################

minMSE = function(MSE, discretizacion){
  n = length(MSE)
  MSEmins = numeric()
  index = numeric()
  l = 0
  for (i in 2:(n-1)){
    if ((MSE[i]<MSE[i-1]) & (MSE[i]<MSE[i+1])){
      l = l + 1
      MSEmins[l] = MSE[i]
      index[l] = discretizacion[i]
    }
  }
  #
  if (l==0) MSEmins = -1
  #
  global = 0
  if (l==1) global = 1
  if (l>1) global = 2
  #
  output = data.frame(min(index), min(MSEmins), global) 
  return(output)
}

########

firstV = function(V, threshold, discretizacion, minor = TRUE){
  # V is a decreasing vector
  n = length(V)
  Vfirst = -1
  index = -1
  for (i in 1:n){
	if (minor) {
	    if (V[i]<threshold){
	      Vfirst = V[i]
	      index = discretizacion[i]
	      break
	    }
	} else {
	    if (V[i]>threshold){
	      Vfirst = V[i]
	      index = discretizacion[i]
	      break
	    }
	}
  }
  #
  output = data.frame(index, Vfirst) 
  return(output)
}

########

firstVIF = function(VIFs, threshold, leap, stop){
  VIFs = as.matrix(VIFs)
  discretizacion = seq(0, stop, leap)
  rows = nrow(VIFs)
  cols = ncol(VIFs)
  #
  VIFfirst = numeric()
  index = numeric()
  for (i in 1:cols) {
  	minimum = firstV(VIFs[,i], threshold, discretizacion)
	index[i] = minimum[[1]]
  	VIFfirst[i] = minimum[[2]]
  }
  #
  output = data.frame(index, VIFfirst) 
  return(output)
}

####################################################################